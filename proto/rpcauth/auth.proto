syntax = "proto3";

// Package rpcauth defines authentication and rate limiting rules for RPC services and methods.
//
//             +---------------+
//             |    Request    |
//             +-------+-------+
//                     |
//                     v
//     +--------------------------------+     # Uses IP-based rate limiting for anonymous users
//     |      Pre-Auth Rate Limit       |     # Example: Max 100 requests per IP per minute
//     +--+-------------+---------------+     #
//        |             |                     # Can also use GLOBAL limit type for entire API
//        v             v                     # Example: max 10,000 total requests per minute
//      [429]       [Continue]
//                      |
//                      v
//     +--------------------------------+     # Validates credentials (JWT, API key, etc)
//     |         Authenticator          |     # Extracts user identity and basic claims
//     +--+-------------+---------------+     # Example: JWT signature validation
//        |             |
//        v             v
//      [401]       [Continue]
//                      |
//                      v
//     +--------------------------------+     # Now can rate limit by user ID or API key
//     |     Post-Auth Rate Limit       |     # Different limits by user tier/role
//     +--+-------------+---------------+     # Example: Premium users: 1000 req/min
//        |             |                     #          Basic users: 100 req/min
//        v             v
//      [429]       [Handler]
//
// The above pipeline is a high-level overview of the request processing flow. Each step can be
// customized to fit the needs of the API via plugable components. The goal is to provide a flexible
// set of Protobuf options that can be used to define auth-related rules that get enforced at
// runtime.
package rpcauth;

import "google/protobuf/descriptor.proto";

option go_package = "buf.build/gen/go/protolayer/rpcauth/protocolbuffers/go/rpcauth";

// Note, the rules are unregistered. Using a sufficiently high number to avoid conflicts with other
// fields that are in the lower ranges.
//
// See https://github.com/protocolbuffers/protobuf/blob/v28.3/docs/options.md for more information.
//
// I hope to get a range of a few numbers to work with, which should be enough for the foreseeable
// future.

// Adds authentication rules that apply to an entire service. These rules act as defaults for all
// methods in the service.
extend google.protobuf.ServiceOptions {
  optional AuthRule service = 1300;
}

// Adds authentication rules for individual RPC methods. These rules override any service-level auth
// rules when present.
extend google.protobuf.MethodOptions {
  optional AuthRule method = 1301;
}

// Adds privacy controls for individual message fields.
extend google.protobuf.FieldOptions {
  // Controls field visibility.
  optional PrivacyRule field = 1302;
}

// Combines authentication and rate limiting for controlling access to services and methods.
message AuthRule {
  // Determines if authentication is required or optional.
  //
  // Who are you?
  AuthType auth = 1;
  // Defines rate limiting parameters.
  //
  // How often can you do it?
  RateRule rate = 2;
}

// Authentication type for a service or method.
enum AuthType {
  AUTH_UNSPECIFIED = 0;
  // Public endpoint, no authentication required.
  PUBLIC = 1;
  // Authentication required to access endpoint.
  REQUIRED = 2;
}

// Rate limiting configuration for an RPC method.
message RateRule {
  // What to use as the rate limit key.
  RateKeyType key = 1;
  // Roles that bypass rate limiting entirely. Only applies to authenticated users.
  repeated string bypass_roles = 2;
  // Rate limiting algorithm configuration.
  oneof algorithm {
    // Leaky bucket configuration.
    LeakyBucket leaky_bucket = 3;

    // Add more rate limiting algorithms here. For example, token bucket, fixed window, etc.
  }
}

// Different types of rate limit keys.
enum RateKeyType {
  LIMIT_UNSPECIFIED = 0;
  // Limit by client IP address.
  IP = 1;
  // Limit by authenticated user.
  USER = 2;
  // Limit by API key.
  //
  // This is useful for limiting the number of requests per API key, regardless of the USER.
  API_KEY = 3;
  // Global limit across all requests.
  //
  // This is useful for limiting the total number of requests to a service or method, regardless of
  // the client. For example, a method may want to limit the total number of requests to 1000 per
  // second. This is different from the other types of rate limiting, which are per client
  // (anonymous by IP, authenticated user, or API key).
  GLOBAL = 4;
}

// Leaky bucket rate limiting configuration.
//
// Imagine a bucket that:
//  - Can hold up to X requests (burst_capacity)
//  - Drains (processes) requests at a steady rate of Y requests per Z seconds
//  - Rejects any new requests immediately when the bucket is full
//
// Example configuration:
//  - burst_capacity: 20       # Can handle bursts of up to 20 requests
//  - allowed_requests: 10     # Processes 10 requests per time window
//  - time_window_seconds: 60  # Every 60 seconds (i.e. 10 req/min, drain rate ~0.167 req/sec)
//
// In this example, the service processes a maximum of 600 requests per hour (10 per minute), while
// allowing temporary bursts of up to 20 requests. While the bucket is full, any new incoming
// requests are immediately rejected. The bucket continuously drains at a rate of 10 requests per 60
// seconds, and as space becomes available, new requests can be accepted again.
message LeakyBucket {
  // Maximum number of requests the bucket can hold at any one time.
  uint32 burst_capacity = 1;
  // Number of requests processed per time window.
  uint32 allowed_requests = 2;
  // Duration of the time window (in seconds) over which allowed_requests are processed.
  uint32 time_window_seconds = 3;
}

// PrivacyRule controls field visibility behavior.
message PrivacyRule {
  // Behavior when accessing field from an unauthenticated context.
  PrivacyType privacy = 1;
}

// PrivacyType is used to determine how to handle sensitive fields.
enum PrivacyType {
  PRIVACY_UNSPECIFIED = 0;
  // Field is not sensitive and can be returned in the response.
  VISIBLE = 1;
  // Field is sensitive and should be omitted from the response entirely.
  OMIT = 2;
  // Field is sensitive and should be redacted from the response (replaced with a configurable
  // placeholder value).
  REDACT = 3;
}
